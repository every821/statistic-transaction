{"version":3,"sources":["angular-chart.min.js"],"names":["factory","exports","module","angular","require","Chart","define","amd","Error","ChartJsProvider","options","ChartJs","getOptions","type","typeOptions","extend","this","setOptions","customOptions","$get","ChartJsFactory","$timeout","canUpdateChart","newVal","oldVal","length","Array","isArray","every","element","index","reduce","sum","carry","val","getEventHandler","scope","chart","action","triggerOnlyOnChange","lastState","evt","atEvent","getElementsAtEvent","getPointsAtEvent","activePoints","call","equals","getColors","colors","copy","chartColors","defaults","global","notEnoughColors","chartData","push","chartGetColor","map","convertColor","color","getColor","hexToRgb","substr","getRandomColor","getRandomInt","backgroundColor","rgba","pointBackgroundColor","pointHoverBackgroundColor","borderColor","pointBorderColor","pointHoverBorderColor","min","max","Math","floor","random","alpha","useExcanvas","join","concat","hex","bigint","parseInt","r","g","b","hasData","chartLabels","getDataSets","labels","data","series","datasetOverride","datasets","item","i","dataset","label","merge","getData","hoverBackgroundColor","updateChart","values","forEach","update","$emit","isEmpty","value","Object","keys","isResponsive","chartOptions","responsive","destroyChart","destroy","restrict","chartType","chartSeries","chartClick","chartHover","chartDatasetOverride","link","elem","resetChart","createChart","clientHeight","cvs","ctx","getContext","onclick","noop","onmousemove","window","G_vmlCanvasManager","initElement","$watch","$on","resize","multiTooltipTemplate","tooltips","mode","elements","line","borderWidth","rectangle","legend","display","animation","provider","directive"],"mappings":"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","file":"angular-chart.min.js","sourcesContent":["(function (factory) {\n  'use strict';\n  if (typeof exports === 'object') {\n    // Node/CommonJS\n    module.exports = factory(\n      typeof angular !== 'undefined' ? angular : require('angular'),\n      typeof Chart !== 'undefined' ? Chart : require('chart.js'));\n  }  else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['angular', 'chart'], factory);\n  } else {\n    // Browser globals\n    if (typeof angular === 'undefined' || typeof Chart === 'undefined') throw new Error('Chart.js library needs to included, ' +\n      'see http://jtblin.github.io/angular-chart.js/');\n    factory(angular, Chart);\n  }\n}(function (angular, Chart) {\n  'use strict';\n\n  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';\n  Chart.defaults.global.tooltips.mode = 'label';\n  Chart.defaults.global.elements.line.borderWidth = 2;\n  Chart.defaults.global.elements.rectangle.borderWidth = 2;\n  Chart.defaults.global.legend.display = false;\n  Chart.defaults.global.colors = [\n    '#97BBCD', // blue\n    '#DCDCDC', // light grey\n    '#F7464A', // red\n    '#46BFBD', // green\n    '#FDB45C', // yellow\n    '#949FB1', // grey\n    '#4D5360'  // dark grey\n  ];\n\n  var useExcanvas = typeof window.G_vmlCanvasManager === 'object' &&\n    window.G_vmlCanvasManager !== null &&\n    typeof window.G_vmlCanvasManager.initElement === 'function';\n\n  if (useExcanvas) Chart.defaults.global.animation = false;\n\n  return angular.module('chart.js', [])\n    .provider('ChartJs', ChartJsProvider)\n    .factory('ChartJsFactory', ['ChartJs', '$timeout', ChartJsFactory])\n    .directive('chartBase', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory(); }])\n    .directive('chartLine', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('line'); }])\n    .directive('chartBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('bar'); }])\n    .directive('chartHorizontalBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('horizontalBar'); }])\n    .directive('chartRadar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('radar'); }])\n    .directive('chartDoughnut', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('doughnut'); }])\n    .directive('chartPie', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('pie'); }])\n    .directive('chartPolarArea', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('polarArea'); }]);\n\n  /**\n   * Wrapper for chart.js\n   * Allows configuring chart js using the provider\n   *\n   * angular.module('myModule', ['chart.js']).config(function(ChartJsProvider) {\n   *   ChartJsProvider.setOptions({ responsive: true });\n   *   ChartJsProvider.setOptions('Line', { responsive: false });\n   * })))\n   */\n  function ChartJsProvider () {\n    var options = {};\n    var ChartJs = {\n      Chart: Chart,\n      getOptions: function (type) {\n        var typeOptions = type && options[type] || {};\n        return angular.extend({}, options, typeOptions);\n      }\n    };\n\n    /**\n     * Allow to set global options during configuration\n     */\n    this.setOptions = function (type, customOptions) {\n      // If no type was specified set option for the global object\n      if (! customOptions) {\n        customOptions = type;\n        options = angular.extend(options, customOptions);\n        return;\n      }\n      // Set options for the specific chart\n      options[type] = angular.extend(options[type] || {}, customOptions);\n    };\n\n    this.$get = function () {\n      return ChartJs;\n    };\n  }\n\n  function ChartJsFactory (ChartJs, $timeout) {\n    return function chart (type) {\n      return {\n        restrict: 'CA',\n        scope: {\n          chartGetColor: '=?',\n          chartType: '=',\n          chartData: '=?',\n          chartLabels: '=?',\n          chartOptions: '=?',\n          chartSeries: '=?',\n          chartColors: '=?',\n          chartClick: '=?',\n          chartHover: '=?',\n          chartDatasetOverride: '=?'\n        },\n        link: function (scope, elem/*, attrs */) {\n          var chart;\n\n          if (useExcanvas) window.G_vmlCanvasManager.initElement(elem[0]);\n\n          // Order of setting \"watch\" matter\n\n          scope.$watch('chartData', function (newVal, oldVal) {\n            if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) {\n              destroyChart(chart, scope);\n              return;\n            }\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            if (chart && canUpdateChart(newVal, oldVal))\n              return updateChart(chart, newVal, scope);\n\n            createChart(chartType);\n          }, true);\n\n          scope.$watch('chartSeries', resetChart, true);\n          scope.$watch('chartLabels', resetChart, true);\n          scope.$watch('chartOptions', resetChart, true);\n          scope.$watch('chartColors', resetChart, true);\n          scope.$watch('chartDatasetOverride', resetChart, true);\n\n          scope.$watch('chartType', function (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            createChart(newVal);\n          });\n\n          scope.$on('$destroy', function () {\n            destroyChart(chart, scope);\n          });\n\n          scope.$on('$resize', function () {\n            if (chart) chart.resize();\n          });\n\n          function resetChart (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            // chart.update() doesn't work for series and labels\n            // so we have to re-create the chart entirely\n            createChart(chartType);\n          }\n\n          function createChart (type) {\n            // TODO: check parent?\n            if (isResponsive(type, scope) && elem[0].clientHeight === 0) {\n              return $timeout(function () {\n                createChart(type);\n              }, 50, false);\n            }\n            if (! hasData(scope)) return;\n            scope.chartGetColor = typeof scope.chartGetColor === 'function' ? scope.chartGetColor : getRandomColor;\n            var colors = getColors(type, scope);\n            var cvs = elem[0], ctx = cvs.getContext('2d');\n            var data = Array.isArray(scope.chartData[0]) ?\n              getDataSets(scope.chartLabels, scope.chartData, scope.chartSeries || [], colors, scope.chartDatasetOverride) :\n              getData(scope.chartLabels, scope.chartData, colors, scope.chartDatasetOverride);\n\n            var options = angular.extend({}, ChartJs.getOptions(type), scope.chartOptions);\n            // Destroy old chart if it exists to avoid ghost charts issue\n            // https://github.com/jtblin/angular-chart.js/issues/187\n            destroyChart(chart, scope);\n\n            chart = new ChartJs.Chart(ctx, {\n              type: type,\n              data: data,\n              options: options\n            });\n            scope.$emit('chart-create', chart);\n\n            // Bind events\n            cvs.onclick = scope.chartClick ? getEventHandler(scope, chart, 'chartClick', false) : angular.noop;\n            cvs.onmousemove = scope.chartHover ? getEventHandler(scope, chart, 'chartHover', true) : angular.noop;\n          }\n        }\n      };\n    };\n\n    function canUpdateChart (newVal, oldVal) {\n      if (newVal && oldVal && newVal.length && oldVal.length) {\n        return Array.isArray(newVal[0]) ?\n        newVal.length === oldVal.length && newVal.every(function (element, index) {\n          return element.length === oldVal[index].length; }) :\n          oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\n      }\n      return false;\n    }\n\n    function sum (carry, val) {\n      return carry + val;\n    }\n\n    function getEventHandler (scope, chart, action, triggerOnlyOnChange) {\n      var lastState = null;\n      return function (evt) {\n        var atEvent = chart.getElementsAtEvent || chart.getPointsAtEvent;\n        if (atEvent) {\n          var activePoints = atEvent.call(chart, evt);\n          if (triggerOnlyOnChange === false || angular.equals(lastState, activePoints) === false) {\n            lastState = activePoints;\n            scope[action](activePoints, evt);\n          }\n        }\n      };\n    }\n\n    function getColors (type, scope) {\n      var colors = angular.copy(scope.chartColors ||\n        ChartJs.getOptions(type).chartColors ||\n        Chart.defaults.global.colors\n      );\n      var notEnoughColors = colors.length < scope.chartData.length;\n      while (colors.length < scope.chartData.length) {\n        colors.push(scope.chartGetColor());\n      }\n      // mutate colors in this case as we don't want\n      // the colors to change on each refresh\n      if (notEnoughColors) scope.chartColors = colors;\n      return colors.map(convertColor);\n    }\n\n    function convertColor (color) {\n      if (typeof color === 'object' && color !== null) return color;\n      if (typeof color === 'string' && color[0] === '#') return getColor(hexToRgb(color.substr(1)));\n      return getRandomColor();\n    }\n\n    function getRandomColor () {\n      var color = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n      return getColor(color);\n    }\n\n    function getColor (color) {\n      return {\n        backgroundColor: rgba(color, 0.2),\n        pointBackgroundColor: rgba(color, 1),\n        pointHoverBackgroundColor: rgba(color, 0.8),\n        borderColor: rgba(color, 1),\n        pointBorderColor: '#fff',\n        pointHoverBorderColor: rgba(color, 1)\n      };\n    }\n\n    function getRandomInt (min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function rgba (color, alpha) {\n      // rgba not supported by IE8\n      return useExcanvas ? 'rgb(' + color.join(',') + ')' : 'rgba(' + color.concat(alpha).join(',') + ')';\n    }\n\n    // Credit: http://stackoverflow.com/a/11508164/1190235\n    function hexToRgb (hex) {\n      var bigint = parseInt(hex, 16),\n        r = (bigint >> 16) & 255,\n        g = (bigint >> 8) & 255,\n        b = bigint & 255;\n\n      return [r, g, b];\n    }\n\n    function hasData (scope) {\n      return scope.chartData && scope.chartData.length &&\n        scope.chartLabels && scope.chartLabels.length;\n    }\n\n    function getDataSets (labels, data, series, colors, datasetOverride) {\n      return {\n        labels: labels,\n        datasets: data.map(function (item, i) {\n          var dataset = angular.extend({}, colors[i], {\n            label: series[i],\n            data: item\n          });\n          if (datasetOverride && datasetOverride.length >= i) {\n            angular.merge(dataset, datasetOverride[i]);\n          }\n          return dataset;\n        })\n      };\n    }\n\n    function getData (labels, data, colors, datasetOverride) {\n      var dataset = {\n        labels: labels,\n        datasets: [{\n          data: data,\n          backgroundColor: colors.map(function (color) {\n            return color.pointBackgroundColor;\n          }),\n          hoverBackgroundColor: colors.map(function (color) {\n            return color.backgroundColor;\n          })\n        }]\n      };\n      if (datasetOverride) {\n        angular.merge(dataset.datasets[0], datasetOverride);\n      }\n      return dataset;\n    }\n\n    function updateChart (chart, values, scope) {\n      if (Array.isArray(scope.chartData[0])) {\n        chart.data.datasets.forEach(function (dataset, i) {\n          dataset.data = values[i];\n        });\n      } else {\n        chart.data.datasets[0].data = values;\n      }\n\n      chart.update();\n      scope.$emit('chart-update', chart);\n    }\n\n    function isEmpty (value) {\n      return ! value ||\n        (Array.isArray(value) && ! value.length) ||\n        (typeof value === 'object' && ! Object.keys(value).length);\n    }\n\n    function isResponsive (type, scope) {\n      var options = angular.extend({}, Chart.defaults.global, ChartJs.getOptions(type), scope.chartOptions);\n      return options.responsive;\n    }\n\n    function destroyChart(chart, scope) {\n      if(! chart) return;\n      chart.destroy();\n      scope.$emit('chart-destroy', chart);\n    }\n  }\n}));\n"],"sourceRoot":"/source/"}